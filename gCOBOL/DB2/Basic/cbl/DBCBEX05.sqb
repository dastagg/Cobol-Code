      ***********************************************************
      * Program name:    DBCBEX05
      * Original author: David Stagowski
      *
      *    Description: Example 05: DB Record Processing: Delete
      *
      *    This program will delete a record from DB.
      *
      *    There are some differences between the GnuCOBOL and 
      *       ZOS DB2 programs.
      *
      *    The biggest difference is the 9800-Connect-to-DB1 paragraph.
      *
      *    On ZOS, the JCL makes the connection so there is no need for
      *       passing the username and password for the database.
      *
      *    That is required with GnuCOBOL.
      *    These GnuCOBOL programs use GETDBID, a very simple called
      *    module that has the username and password embedded in it.
      *    When called, it passes them up to the calling program which
      *    then uses them to make the connection to the server.
      *
      *
      * Maintenence Log
      * Date       Author        Maintenance Requirement
      * ---------- ------------  --------------------------------
      * 2020-08-20 dastagg       Created to learn.
      * 2020-08-20 dastagg       If you change me, change this.

      ***********************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. DBCBEX05.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      * SOURCE-COMPUTER.   IBM WITH DEBUGGING MODE.
     
       DATA DIVISION.
       WORKING-STORAGE SECTION.

           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.

      *******************
      *    This is another BIG difference between GnuCOBOL
      *    and ZOS. If the Host Variables are not DECLAREd
      *    in GnuCOBOL, it is an error and it won't bind.
      *    On ZOS, DECLAREing them is not required and if 
      *    present, will cause a Warning(RC=04) for the compile.

           EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  HV-Employee-Row.
           12 HV-Emp-Number           PIC X(06).
           12 HV-First-Name           PIC X(12).
           12 HV-Middle-Init          PIC X(01).
           12 HV-Last-Name            PIC X(15).
           12 HV-Work-Dept            PIC X(03).
           12 HV-Phone-Number         PIC X(04).
           12 HV-Hire-Date            PIC X(10).
           12 HV-Job-Title            PIC X(08).
           12 HV-Edu-Level            PIC S9(04) COMP-5.
           12 HV-Gender               PIC X(01).
           12 HV-Birth-Date           PIC x(10).
           12 HV-Salary               PIC S9(7)V99 COMP-3.
           12 HV-Bonus                PIC S9(7)V99 COMP-3.
           12 HV-Commission           PIC S9(7)V99 COMP-3.

      *    This is hardcoded for the SAMPLE DB.
      *    You might need to update this for your DB.
       01  DB-Connection-Info.
           12 DB-Alias                PIC X(8) VALUE 'SAMPLE'.
           12 DB-User-ID              PIC X(10).
           12 DB-Password.
              15 DB-Passwd-Length     PIC S9(4) COMP-5  VALUE 0.
              15 DB-Passwd-Name       PIC X(18).
           EXEC SQL END DECLARE SECTION END-EXEC.
      *******************

       01 WS-SQL-STATUS                PIC S9(9) COMP-5.
          88 SQL-STATUS-OK             VALUE    0.
          88 SQL-STATUS-NOT-FOUND      VALUE  100.
          88 SQL-STATUS-DUP            VALUE -803.

       01  WS-Called-Programs.
           12 WS-GetDBId               PIC X(8) VALUE SPACES.

       01 EOJ-Display-Messages.
           12 EOJ-End-Message PIC X(042) VALUE
              "*** Program DCBCEX05 - End of Run Messages".

       PROCEDURE DIVISION.
       0000-Mainline.
           PERFORM 1000-Begin-Job.
           PERFORM 2000-Process.
           PERFORM 3000-End-Job.
           GOBACK.

       1000-Begin-Job.
           PERFORM 9800-Connect-to-DB1.

       2000-Process.
           IF SQL-STATUS-OK
              PERFORM 2100-Process-Data
           END-IF.

       2100-Process-Data.
           MOVE '000230' TO HV-Emp-Number.
           PERFORM 6200-Delete-DB1.

           IF SQL-STATUS-OK
              DISPLAY "It worked. Record was deleted."
              DISPLAY "The data: " HV-Employee-Row
           END-IF.

       3000-End-Job.
           EXEC SQL CONNECT RESET END-EXEC.
           MOVE SQLCODE TO WS-SQL-STATUS.

           DISPLAY EOJ-End-Message.           
           DISPLAY "SQLCODE at 3000-End-Job: " SQLCODE.

       6200-Delete-DB1.
           EXEC SQL
              DELETE FROM EMPLOYEE2
              WHERE EMPNO = :HV-Emp-Number
           END-EXEC.
           MOVE SQLCODE TO WS-SQL-STATUS.
           IF SQL-STATUS-OK
              NEXT SENTENCE
           ELSE
              DISPLAY "*** WARNING ***"
              DISPLAY "There was a problem Deleting the record."
              DISPLAY "SQLCODE = " SQLCODE
              PERFORM 3000-End-Job
              MOVE 8 TO RETURN-CODE
              GOBACK 
           END-IF.

       9800-Connect-to-DB1.
           PERFORM 9810-Setup-DB1-Connection.
           IF SQL-STATUS-OK
              CONTINUE
           ELSE
              DISPLAY "*** The DB connection is not valid!***"
              DISPLAY "Exiting the program.!"
              GOBACK
           END-IF.

       9810-Setup-DB1-Connection.
           PERFORM 9811-Get-Credentials.
           PERFORM 9812-Create-Connection-To-DB1.

       9811-Get-Credentials.
           MOVE 'GETDBID' TO WS-GetDBId
           CALL WS-GetDBId USING DB-User-ID, DB-Passwd-Name.
      * Passwords in a CONNECT statement must be entered in a VARCHAR
      * format with the length of the input string.
           INSPECT DB-Passwd-Name
              TALLYING DB-Passwd-Length
              FOR CHARACTERS BEFORE INITIAL " ".

       9812-Create-Connection-To-DB1.
           PERFORM 9814-Connect-To-DB1.

       9814-Connect-To-DB1.
           EXEC SQL CONNECT TO :DB-Alias
                USER :DB-User-ID
                USING :DB-Passwd-Name
              END-EXEC.
           MOVE SQLCODE TO WS-SQL-STATUS.

